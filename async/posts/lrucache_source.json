{"tags":[],"categories":[{"name":"Android源码学习","permalink":"https://joesteven.github.io/categories/Android源码学习/","url":"/async/categories/Android源码学习.json","count":10}],"url":"/async/posts/lrucache_source.json","date":1469715277000,"path":{"year":2016,"month":7,"day":28,"name":"lrucache_source"},"title":"LruCache 源码学习笔记","permalink":"https://joesteven.github.io/lrucache_source/","content":"<p>转载请附原文链接： <a href=\"http://extremej.itscoder.com/lrucache_source/\" target=\"_blank\" rel=\"external\">LruCache 源码学习笔记</a></p>\n<p>上一篇笔记分析了 Volley 中的 <a href=\"http://extremej.itscoder.com/volley_imageloader_source/\" target=\"_blank\" rel=\"external\">ImageLoder</a> ，作者推荐使用 LruCache 来作为一级缓存。本篇笔记就来分析一下 LruCache 是如何实现缓存的。如果你对 LruCache 还不了解，建议先学会使用，本篇笔记直接上源码，不会介绍使用。</p>\n<p>LruCache 是 Android 中的一个缓存工具类，在 Android 3.1 的时候加入 util 包中，对于低版本的上可以在 support 包中找到这个类。该类以 key－value 的形式保存数据，不允许 null key 或者是 null value ，因此只要get(key) 只要返回空，说明缓存中没有这个 key 对应的数据。</p>\n<p>LruCache 实际上是 LinkedHashMap + 最近使用算法，下面就进入源码中去</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>构造方法指定最大容量，初始化一个 LinedHashMap</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size; <span class=\"comment\">// 但前大小</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;<span class=\"comment\">// 允许的最大值</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> putCount;<span class=\"comment\">// 放入缓存数</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> createCount;<span class=\"comment\">// 创建数据数</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> evictionCount;<span class=\"comment\">// 移除数目</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hitCount;<span class=\"comment\">// 命中数</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> missCount;<span class=\"comment\">// miss数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LruCache</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (maxSize &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"maxSize &lt;= 0\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.maxSize = maxSize;</div><div class=\"line\">    <span class=\"keyword\">this</span>.map = <span class=\"keyword\">new</span> LinkedHashMap&lt;K, V&gt;(<span class=\"number\">0</span>, <span class=\"number\">0.75f</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在继承了该类的时候，应该重写 sizeOf 方法来确定每一个元素的大小，默认返回是1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">sizeOf</span><span class=\"params\">(K key, V value)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"trimToSize-核心代码\"><a href=\"#trimToSize-核心代码\" class=\"headerlink\" title=\"trimToSize () 核心代码\"></a>trimToSize () 核心代码</h3><p>LruCache 中有一个方法 trimToSize() ，这个方法就是根据允许的最大容量来调整存储的元素，是否需要清理掉。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">trimToSize</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</div><div class=\"line\">  \t<span class=\"comment\">// 首先进入一个循环</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">        K key;</div><div class=\"line\">        V value;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">          \t<span class=\"comment\">// 如果当前的容量小于0，或者实际为空但 size不为0 抛异常</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (size &lt; <span class=\"number\">0</span> || (map.isEmpty() &amp;&amp; size != <span class=\"number\">0</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(getClass().getName()</div><div class=\"line\">                        + <span class=\"string\">\".sizeOf() is reporting inconsistent results!\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果当前大小小于最大容量，跳出循环，不需要调整</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (size &lt;= maxSize) &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">          \t<span class=\"comment\">// 到这一步则说明当前大小已经大于了允许的最大容量</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 找到缓存中最老的那个元素</span></div><div class=\"line\">            Map.Entry&lt;K, V&gt; toEvict = map.eldest();</div><div class=\"line\">            <span class=\"keyword\">if</span> (toEvict == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 从集合移除这个元素，重新计算当前大小，移除的数量＋1</span></div><div class=\"line\">          \t<span class=\"comment\">// 进入下一次循环判断</span></div><div class=\"line\">            key = toEvict.getKey();</div><div class=\"line\">            value = toEvict.getValue();</div><div class=\"line\">            map.remove(key);</div><div class=\"line\">            size -= safeSizeOf(key, value);</div><div class=\"line\">            evictionCount++;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        entryRemoved(<span class=\"keyword\">true</span>, key, value, <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面就是调整缓存空间的核心代码，总共没有几行。剩下的就是简单的查找，增加，移除等等操作</p>\n<h3 id=\"put\"><a href=\"#put\" class=\"headerlink\" title=\"put()\"></a>put()</h3><p>在往缓存中放数据的时候，考虑了一个冲突的问题，可能这个值已经缓存过了，默认采用的是覆盖，但是提供了一个方法来自定义是覆盖还是保留。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span> || value == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"key == null || value == null\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">// 已经缓存过的值</span></div><div class=\"line\">    V previous;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        putCount++;</div><div class=\"line\">      \t<span class=\"comment\">// 增加当前大小</span></div><div class=\"line\">        size += safeSizeOf(key, value);</div><div class=\"line\">      \t<span class=\"comment\">// 缓存到map中，并获取是否有冲突的值</span></div><div class=\"line\">        previous = map.put(key, value);</div><div class=\"line\">        <span class=\"keyword\">if</span> (previous != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          \t<span class=\"comment\">// 如果之前已经缓存过了，那只是覆盖，因此需要把之前这个值的大小减去</span></div><div class=\"line\">            size -= safeSizeOf(key, previous);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (previous != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      \t<span class=\"comment\">// 该方法提供给使用者自定义是覆盖还是取消</span></div><div class=\"line\">        entryRemoved(<span class=\"keyword\">false</span>, key, previous, value);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">// 检查大小并调整</span></div><div class=\"line\">    trimToSize(maxSize);</div><div class=\"line\">  \t<span class=\"comment\">// 返回冲突的值</span></div><div class=\"line\">    <span class=\"keyword\">return</span> previous;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 LruCache 中只要有元素被移除就会调用一个方法 entryRemoved()，复写这个方法可以自定义你自己的冲突处理策略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">entryRemoved</span><span class=\"params\">(<span class=\"keyword\">boolean</span> evicted, K key, V oldValue, V newValue)</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get()\"></a>get()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">get</span><span class=\"params\">(K key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"key == null\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    V mapValue;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">      \t<span class=\"comment\">// 从缓存中找元素</span></div><div class=\"line\">        mapValue = map.get(key);</div><div class=\"line\">        <span class=\"keyword\">if</span> (mapValue != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          \t<span class=\"comment\">// 找到后 命中数＋1 返回这个元素</span></div><div class=\"line\">            hitCount++;</div><div class=\"line\">            <span class=\"keyword\">return</span> mapValue;</div><div class=\"line\">        &#125;</div><div class=\"line\">      \t<span class=\"comment\">// 没找到就把 miss 数＋1</span></div><div class=\"line\">        missCount++;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">// 以下的代码会试图创建一个数据返回</span></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * Attempt to create a value. This may take a long time, and the map</div><div class=\"line\">     * may be different when create() returns. If a conflicting value was</div><div class=\"line\">     * added to the map while create() was working, we leave that value in</div><div class=\"line\">     * the map and release the created value.</div><div class=\"line\">     */</div><div class=\"line\">\t<span class=\"comment\">// 如果创建的元素为 null 直接返回 null</span></div><div class=\"line\">    V createdValue = create(key);</div><div class=\"line\">    <span class=\"keyword\">if</span> (createdValue == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">      \t<span class=\"comment\">// 说明创建元素成功</span></div><div class=\"line\">        createCount++;</div><div class=\"line\">      \t<span class=\"comment\">// 添加到缓存中</span></div><div class=\"line\">        mapValue = map.put(key, createdValue);</div><div class=\"line\">\t\t</div><div class=\"line\">        <span class=\"keyword\">if</span> (mapValue != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// There was a conflict so undo that last put</span></div><div class=\"line\">          \t<span class=\"comment\">// 发生了冲突，则回滚操作，留给使用者自己处理</span></div><div class=\"line\">            map.put(key, mapValue);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          \t<span class=\"comment\">// 计算当前大小</span></div><div class=\"line\">            size += safeSizeOf(key, createdValue);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mapValue != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      \t<span class=\"comment\">// 发生了冲突，交给调用者处理</span></div><div class=\"line\">        entryRemoved(<span class=\"keyword\">false</span>, key, createdValue, mapValue);</div><div class=\"line\">        <span class=\"keyword\">return</span> mapValue;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      \t<span class=\"comment\">// 添加缓存成功，重新判断大小并处理</span></div><div class=\"line\">        trimToSize(maxSize);</div><div class=\"line\">        <span class=\"keyword\">return</span> createdValue;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到 LruCache 在获取缓存失败了之后，还提供了创建的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> V <span class=\"title\">create</span><span class=\"params\">(K key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove()\"></a>remove()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> V <span class=\"title\">remove</span><span class=\"params\">(K key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"key == null\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    V previous;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        previous = map.remove(key);</div><div class=\"line\">        <span class=\"keyword\">if</span> (previous != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          \t<span class=\"comment\">// 移除成功，重写计算大小</span></div><div class=\"line\">            size -= safeSizeOf(key, previous);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (previous != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        entryRemoved(<span class=\"keyword\">false</span>, key, previous, <span class=\"keyword\">null</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> previous;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>LruCache  的源码就分析完了，发现其实原理没有想象的复杂，事实上有很多牛逼的框架原理也没有想象的那么难，可能就是用最简单的逻辑堆叠而成。</p>\n"}