{"tags":[],"categories":[{"name":"Android源码学习","permalink":"https://joesteven.github.io/categories/Android源码学习/","url":"/async/categories/Android源码学习.json","count":1}],"url":"/async/posts/2016/07/15/Handler源码学习（一）流程.json","date":1468593825000,"path":{"year":2016,"month":7,"day":15,"name":"Handler源码学习（一）流程"},"title":"Handler源码学习（一）流程","permalink":"https://joesteven.github.io/2016/07/15/Handler源码学习（一）流程/","content":"<p>本系列笔记是我阅读Handler及相关类的源码时所记录的一些之前所不知道的知识点，该系列分为三部分，整体流程，Message对象回收原理，MessageQueue管理队列<br>Handler源码学习（一）流程<br><a href=\"http://www.jianshu.com/p/ccab1dc12a50\" target=\"_blank\" rel=\"external\">Handler源码学习（二）Message对象池</a><br><a href=\"http://www.jianshu.com/p/217b4c819718\" target=\"_blank\" rel=\"external\">Handler源码学习（三）MessageQueue入队插队</a></p>\n<h4 id=\"1-创建handler-—-默认构造方法会获取当前线程的looper，也可以传入指定的looper\"><a href=\"#1-创建handler-—-默认构造方法会获取当前线程的looper，也可以传入指定的looper\" class=\"headerlink\" title=\"1.创建handler — 默认构造方法会获取当前线程的looper，也可以传入指定的looper\"></a>1.创建handler — 默认构造方法会获取当前线程的looper，也可以传入指定的looper</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Default constructor associates this handler with the &#123;<span class=\"doctag\">@link</span> Looper&#125; for the</div><div class=\"line\"> * current thread.</div><div class=\"line\"> *</div><div class=\"line\"> * If this thread does not have a looper, this handler won't be able to receive messages</div><div class=\"line\"> * so an exception is thrown.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(<span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Callback callback, <span class=\"keyword\">boolean</span> async)</span> </span>&#123;</div><div class=\"line\">  \t\t<span class=\"comment\">//警告潜在内存泄漏风险</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class=\"line\">          <span class=\"comment\">//如果是匿名类，内部类等等并且不是static 有内存泄露风险</span></div><div class=\"line\">            <span class=\"keyword\">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class=\"line\">                    (klass.getModifiers() &amp; Modifier.STATIC) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                Log.w(TAG, <span class=\"string\">\"The following Handler class should be static or leaks might occur: \"</span> +</div><div class=\"line\">                    klass.getCanonicalName());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">\t\t<span class=\"comment\">//创建looper</span></div><div class=\"line\">        mLooper = Looper.myLooper();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mLooper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                <span class=\"string\">\"Can't create handler inside thread that has not called Looper.prepare()\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        mQueue = mLooper.mQueue;</div><div class=\"line\">        mCallback = callback;</div><div class=\"line\">        mAsynchronous = async;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"2-Looper\"><a href=\"#2-Looper\" class=\"headerlink\" title=\"2.Looper\"></a>2.Looper</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Initialize the current thread as a looper.</span></div><div class=\"line\">  * This gives you a chance to create handlers that then reference</div><div class=\"line\">  * this looper, before actually starting the loop. Be sure to call</div><div class=\"line\">  * &#123;<span class=\"doctag\">@link</span> #loop()&#125; after calling this method, and end it by calling</div><div class=\"line\">  * &#123;<span class=\"doctag\">@link</span> #quit()&#125;.</div><div class=\"line\">  */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    prepare(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//用ThreadLocal来存放looper 如果当前线程已经有一个looper则抛异常</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (sThreadLocal.get() != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Only one Looper may be created per thread\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    sThreadLocal.set(<span class=\"keyword\">new</span> Looper(quitAllowed));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Looper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">        mQueue = <span class=\"keyword\">new</span> MessageQueue(quitAllowed);</div><div class=\"line\">        mThread = Thread.currentThread();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//主线程的looper</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Initialize the current thread as a looper, marking it as an</div><div class=\"line\">     * application's main looper. The main looper for your application</div><div class=\"line\">     * is created by the Android environment, so you should never need</div><div class=\"line\">     * to call this function yourself.  See also: &#123;<span class=\"doctag\">@link</span> #prepare()&#125;</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepareMainLooper</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        prepare(<span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (Looper.class) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (sMainLooper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"The main Looper has already been prepared.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            sMainLooper = myLooper();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//构造方法，创建了一个消息队列</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Looper</span><span class=\"params\">(<span class=\"keyword\">boolean</span> quitAllowed)</span> </span>&#123;</div><div class=\"line\">        mQueue = <span class=\"keyword\">new</span> MessageQueue(quitAllowed);</div><div class=\"line\">        mThread = Thread.currentThread();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-sendMessage\"><a href=\"#3-sendMessage\" class=\"headerlink\" title=\"3.sendMessage\"></a>3.sendMessage</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageAtTime</span><span class=\"params\">(Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">    MessageQueue queue = mQueue;</div><div class=\"line\">    <span class=\"keyword\">if</span> (queue == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                <span class=\"keyword\">this</span> + <span class=\"string\">\" sendMessageAtTime() called with no mQueue\"</span>);</div><div class=\"line\">        Log.w(<span class=\"string\">\"Looper\"</span>, e.getMessage(), e);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//handler中将message添加到消息队列</span></div><div class=\"line\"><span class=\"comment\">//将这个message的target设置成当前的这个handler</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(MessageQueue queue, Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">        msg.target = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mAsynchronous) &#123;</div><div class=\"line\">            msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-loop-—-取出消息\"><a href=\"#4-loop-—-取出消息\" class=\"headerlink\" title=\"4.loop() — 取出消息\"></a>4.loop() — 取出消息</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//target是handler，这里是个无限循环</span></div><div class=\"line\">msg.target.dispatchMessage(msg);</div></pre></td></tr></table></figure>\n<h4 id=\"5-dispatchMessage-—-分发消息\"><a href=\"#5-dispatchMessage-—-分发消息\" class=\"headerlink\" title=\"5.dispatchMessage() — 分发消息\"></a>5.dispatchMessage() — 分发消息</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//三种情况，</span></div><div class=\"line\"><span class=\"comment\">//第一种Message对象的callback不为空(runnable)，交给callback处理，第一种大多是使用post方法传入runnable对象时会调用</span></div><div class=\"line\"><span class=\"comment\">//第二种是handler的callback不为空，交给callback处理，callback</span></div><div class=\"line\"><span class=\"comment\">//前两种都没有的情况下交给handleMessag去处理</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg.callback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        handleCallback(msg);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        handleMessage(msg);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">handleCallback</span><span class=\"params\">(Message message)</span> </span>&#123;</div><div class=\"line\">        message.callback.run();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Callback</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//Handler的callback可以在构造方法中传入</span></div><div class=\"line\"><span class=\"comment\">//Message的callback可以在obtain方法中作为参数传入，注意，一个消息被使用完毕后会被recycle，callback也会被移除，所以只能使用一次</span></div></pre></td></tr></table></figure>\n<h4 id=\"6-post-—-各种post方法\"><a href=\"#6-post-—-各种post方法\" class=\"headerlink\" title=\"6.post — 各种post方法\"></a>6.post — 各种post方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//注意传入的runnable的run方法会在handler所绑定的looper所在线程中执行，最终还是sendMessageDelayed()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">post</span><span class=\"params\">(Runnable r)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span>  sendMessageDelayed(getPostMessage(r), <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//不被推荐使用的方法,很容易导致消息队列清空，排序问题，以及其它副作用</span></div><div class=\"line\"><span class=\"comment\">//Posts a message to an object that implements Runnable.</span></div><div class=\"line\"><span class=\"comment\">//Causes the Runnable r to executed on the next iteration through the</span></div><div class=\"line\"><span class=\"comment\">//message queue.</span></div><div class=\"line\"><span class=\"comment\">//This method is only for use in very special circumstances -- it</span></div><div class=\"line\"><span class=\"comment\">//can easily starve the message queue, cause ordering problems, or have</span></div><div class=\"line\"><span class=\"comment\">//other unexpected side-effects.&lt;/b&gt;</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sendMessageAtFrontOfQueue</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">        MessageQueue queue = mQueue;</div><div class=\"line\">        <span class=\"keyword\">if</span> (queue == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            RuntimeException e = <span class=\"keyword\">new</span> RuntimeException(</div><div class=\"line\">                <span class=\"keyword\">this</span> + <span class=\"string\">\" sendMessageAtTime() called with no mQueue\"</span>);</div><div class=\"line\">            Log.w(<span class=\"string\">\"Looper\"</span>, e.getMessage(), e);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> enqueueMessage(queue, msg, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"8-扩展\"><a href=\"#8-扩展\" class=\"headerlink\" title=\"8.扩展\"></a>8.扩展</h4><ul>\n<li>runOnUiThread()</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//如果当前线程是ui线程就直接调用run方法，如果不是当前线程则通过handler发送消息</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">runOnUiThread</span><span class=\"params\">(Runnable action)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Thread.currentThread() != mUiThread) &#123;</div><div class=\"line\">        mHandler.post(action);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        action.run();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>view.post()</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//首先会判断这个view是否已经attach上了window，如果是的话会使用handler来发送消息</span></div><div class=\"line\"><span class=\"comment\">//否则会加入到消息队列中，等到attach了才会一次取出执行</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">post</span><span class=\"params\">(Runnable action)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> AttachInfo attachInfo = mAttachInfo;</div><div class=\"line\">    <span class=\"keyword\">if</span> (attachInfo != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> attachInfo.mHandler.post(action);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Assume that post will succeed later</span></div><div class=\"line\">    ViewRootImpl.getRunQueue().post(action);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"7-收获\"><a href=\"#7-收获\" class=\"headerlink\" title=\"7.收获\"></a>7.收获</h4><p>1.looper是通过 ThreadLoacal来保存 ，保证looper只被创建一次，且跟当前线程绑定，一个looper。</p>\n<p>2.handler有多个构造方法，并不是必须要重写handleMessage方法，可以通过传入callback对象来处理消息，同时也可以给handler指定looper，因此handler可以给其它线程的looper发送消息。</p>\n<p>3.MessageQueue不由handler创建，而是从looper中获取，一个looper对应有一个MessageQueue，因此一个looper必然可以对应多个handler，它们都是往这同一个消息队列中发送消息而已</p>\n<p>4.Android中的主线程会调用Looper.prepareMainLooper() 方法来创建一个looper，因此不需要我们手动创建looper</p>\n<p>5.handler发送延迟消息时，是通过但前时间＋delayed时间，在某个时间去发送，因此如果在插入message时的时间是0，会容易导致排序问题</p>\n<p>6.每一个Activity在创建的时候其实就已经创建了一个handler，runOnUiThread方法中使用的就是这个handler</p>\n<p>7.view.post除了异步更新ui外还有一个作用，可以判断当前view是否已经attach window，在这个runnable任务被执行时，可以拿到尺寸等等，避免因为disattach造成异常</p>\n"}