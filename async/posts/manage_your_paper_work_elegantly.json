{"tags":[],"categories":[{"name":"Tools","permalink":"https://joesteven.github.io/categories/Tools/","url":"/async/categories/Tools.json","count":1}],"url":"/async/posts/manage_your_paper_work_elegantly.json","date":1489514347000,"path":{"year":2017,"month":3,"day":15,"name":"manage_your_paper_work_elegantly"},"title":"优雅的管理你的文稿","permalink":"https://joesteven.github.io/manage_your_paper_work_elegantly/","content":"<h3 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h3><p>在我没做码农前，经常需要写各种论文，报表之类的文稿。有一个非常苦恼的困扰就是，写完了一个版本后，要在这版本基础上改动，就复制一份，时间长了以后电脑上各种 1.0、2.0、3.0…一团遭，为了保持整洁就删除了一些认为以后用不到的，结果后面突然要用，这种痛我想很多人都有。还有跟别人一起写文稿的时候，明明是他写的，后来甩锅给我，那种委屈简直了。</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/manage_origin.png\" alt=\"疯狂 cv\"></p>\n<p>做了码农后，我发现有很多工具，即使你不写代码，熟练使用后，也会大大改善你的工作效率～，今天教大家如何优雅的管理你的文稿。</p>\n<h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>如果你认真的看完了本篇文章，我希望能帮你在管理文稿的过程中达到以下几个目标：</p>\n<ul>\n<li>永远告别复制粘贴产生的一堆 x.x 及备份文件。</li>\n<li>不管你写了多少个版本，让你一秒切换到任意版本。</li>\n<li>精确比较每一个版本间的不同。</li>\n<li>多人合作，再也不怕别人甩锅。</li>\n<li>（如果需要）远程备份，再也不怕电脑突然跪了。</li>\n</ul>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><p>无论你是使用 windows 还是 Mac ，都需要用到这个工具 — <strong>Git</strong>。</p>\n<p>因为本篇文章主要目的是管理文稿，所以只会介绍相关的 Git 使用，如果你对 Git 很感兴趣可以自行搜索。</p>\n<h4 id=\"Git-配置\"><a href=\"#Git-配置\" class=\"headerlink\" title=\"Git 配置\"></a>Git 配置</h4><p> Git 是 Linux 之父 Linus Torvalds 一怒之下撸出来的一个代码版本管理工具，Git 是基于命令行进行操作，当然也有很多的开源工具，实现了对 Git 进行图形化操作，也就是大家常见的各种软件，只需要鼠标点就好了。</p>\n<p>但是在这里我会先教大家使用命令行，这样能比较快速的熟悉 Git 的相关命令，并且图形化一般只有一些常用命令，所以掌握一些命令是有必要的。（命令行会显得你逼格比较高～）</p>\n<p>扯远了，先来配置好 Git～</p>\n<p>1.Mac 先到官网<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">下载</a> Git ，Windows <a href=\"http://git-scm.com/download/win\" target=\"_blank\" rel=\"external\">点我</a>。</p>\n<p>2.下载完成后安装～这一步应该没有什么问题，那么怎么判断你是否安装成功呢？</p>\n<p>如果是  Mac ，在 Launchpad —&gt; 其他 —&gt; 终端，打开终端～你会看到下图这个窗口。（当然你的可能是白色的）</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/teminate.png\" alt=\"Mac 终端\"></p>\n<p>然后输入下面的命令<code>git version</code>然后回车，查看 Git  的版本，如图：</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_version.png\" alt=\"git version\"></p>\n<p>输出版本号说明安装成功</p>\n<p> Windows 的话在菜单—&gt;Git—&gt;GitBash ，点开，弹出一个命令行窗口（cmd) ，类似于下图：</p>\n<p>就说明安装成功了。</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_bash.png\" alt=\"git bash\"></p>\n<p>3.如何使用 Git？在 Mac 环境下打开终端就可以开始输入 Git 命令了，在 Windows 下除了点菜单，在某个文件夹下点击右键也可以找到 Git Bash，打开就可以。</p>\n<p>到这里 Git 就配置完成了，如果你发现还是没办法正常使用 Git 的话，可以看看这个<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000\" target=\"_blank\" rel=\"external\">教程</a>。</p>\n<p>现在开始，我们从新建一篇论文开始，为了方便，就新建 txt 文件作为我们的文稿测试。</p>\n<h3 id=\"新建论文\"><a href=\"#新建论文\" class=\"headerlink\" title=\"新建论文\"></a>新建论文</h3><p>前文我们提到了，Git 可以帮助你不被别人甩锅，所以每次的改动应该知道是谁来做的，那么我们需要先配置你的名称，打开命令行窗口，Mac 是终端，Windows 是 Git Bash ，大家记住，后面不会再提了～</p>\n<p>输入以下命令，输完一行就回车，再输入下一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;Your Name&quot;</div><div class=\"line\">git config --global user.email &quot;email@example.com&quot;</div></pre></td></tr></table></figure>\n<p>这两句命令的意思就是为这个电脑的版本管理配置了修改人的姓名和邮箱，这样每次修改就明确知道是谁修改的。</p>\n<p>废话不多说，我们先建一个文件夹：Demo，然后在这个文件夹下新建一个 txt 文件假装是我们的论文（对，假装，你非要用 word 也可以～）</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/create_file.png\" alt=\"新建论文文件夹\"></p>\n<p>注意了，现在文件夹有了，论文也有了，怎么用 Git 来管理呢？首先要将这个文件夹变成一个 Git 仓库，说仓库可能有点难理解，但是大家想想仓库，进货出货等等都会登记对吧？咱们就要吧咱们的论文文件夹变成一个严格管理的仓库。</p>\n<p>Mac 的同学打开终端，cd 到这个文件夹下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd xxx/xxx/Demo</div></pre></td></tr></table></figure>\n<p>注意，这个 xxx/xxx/Demo 是这个文件夹的路径，可以通过右键查看。cd 到这个文件夹下就相当于在命令行中进入到了这个窗口下</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/cd_xxx.png\" alt=\"cd 到文件夹下\"></p>\n<p>Windows 的同学可以直接在 Demo 文件夹下面右键打开 Git Bash ，就默认进入到该文件夹下啦</p>\n<h4 id=\"初始化仓库\"><a href=\"#初始化仓库\" class=\"headerlink\" title=\"初始化仓库\"></a>初始化仓库</h4><p>现在已经到这个文件夹下了，我们先来看一下这个文件夹的状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure>\n<p>查看 Git 仓库的状态，不出意外你会发现报错了</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_status_failed.png\" alt=\"git 仓库不存在\"></p>\n<p>意思是这不是一个 Git 仓库，那么我们来把它变成一个仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_init.png\" alt=\"初始化仓库\"></p>\n<p>这句命令是初始化一个仓库，init 是 Initialized 的缩写，初始化后我们再来查看一下仓库的状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_status_1.png\" alt=\"初始化仓库状态\"></p>\n<p>看到了么，我们的仓库已经创建成功了，并且刚刚我们创建的这个论文也出现在了命令行中，并且是红色的～，咱们先不去管是什么意思，来写我们的论文</p>\n<h4 id=\"给论文加点东西\"><a href=\"#给论文加点东西\" class=\"headerlink\" title=\"给论文加点东西\"></a>给论文加点东西</h4><p>咱们打开论文，写点东西：</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/file_1.png\" alt=\"第一次修改论文\"></p>\n<p>好啦～简单的完成了第一次修改，我们需要保存这一次修改，还是先来查看下仓库的状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure>\n<p>记住这个命令，你会经常用到的～</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_status_2.png\" alt=\"第一次修改后的状态\"></p>\n<p>发现跟刚刚初始化的时候的状态一样，好了，我们要来记录这一次修改了，首先将要修改的文件加入到本次纪录中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add xxx</div></pre></td></tr></table></figure>\n<p>xxx 是被修改的文件，这里就是我们的 初版.txt，注意是相对路径（相对这个文件夹的）,比如说这个文件夹下面还有一个文件夹 test，test 下面有个文件 xxx，那么 xxx 就应该是 test/xxx。</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_add.png\" alt=\"add 修改文件\"></p>\n<p>add 之后好像什么都没发生哈，再来查看下 status：</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_status_3.png\" alt=\"add 后状态\"></p>\n<p>喏～变绿了有没有，而且有一行字提示你有修改等着被提交，那么我们就来提交吧：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m &apos;这里是本次修改的描述信息&apos;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_commit_1.png\" alt=\"commit 修改\"></p>\n<p>ok~提示我们完成了提交，并且提交的内容是什么也显示了出来。</p>\n<h4 id=\"查看修改\"><a href=\"#查看修改\" class=\"headerlink\" title=\"查看修改\"></a>查看修改</h4><p>我们提交了第一次修改，那么在哪里查看呢？用下面这个命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git log</div></pre></td></tr></table></figure>\n<p>这个命令会以流水线的形式来展示我们的每一次修改</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_log_1.png\" alt=\"git log\"></p>\n<p>注意一下，这里f移动查看log 是 h j k l ，而不是方向键，如果要退出查看 log 按一下 q （quit）</p>\n<p>好，我们简单的来总结下上面这几步</p>\n<ul>\n<li>首先是初始化仓库，这个仓库必须是一个文件夹（只需要初始化一次）</li>\n<li>然后修改你的论文，把本次修改 add 进这一次的提交内容中</li>\n<li>最后确定没问题，提交这次修改纪录</li>\n<li>查看这次修改的日志</li>\n</ul>\n<p>用到的命令有</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init //初始化</div><div class=\"line\">git status //查看状态</div><div class=\"line\">git add xxx //添加某个文件</div><div class=\"line\">git commit -m &apos;xxx&apos; // 提交这次纪录</div><div class=\"line\">git log // 查看日志</div></pre></td></tr></table></figure>\n<p>好了～，说到这里，是不是感觉干了好多并不明白的事情？貌似并没有什么卵用啊？？？别着急，进入下一步</p>\n<h3 id=\"修改论文\"><a href=\"#修改论文\" class=\"headerlink\" title=\"修改论文\"></a>修改论文</h3><p>上面我们只是刚刚新建了一篇论文，简单的写了个开头而已，现在我们要真正的去写我们的出版了，打开初版，疯狂的输出～</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/file_2.png\" alt=\"修改正文\"></p>\n<p>ok~正文写完了。。。虽然我这里写的很少，但是假装我们写的很多～我们来查看下仓库的状态</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_status_4.png\" alt=\"修改正文后的状态\"></p>\n<p>看到没～又变红了，我们先不急着像上面一样提交修改，假如我们现在想看看我们到底修改了写什么，跟我们修改前的文件对比一下呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff</div></pre></td></tr></table></figure>\n<p>diff 是 different 的缩写</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_diff.png\" alt=\"diff\"></p>\n<p>－号代表了修改前的文件，＋号代表了修改后的文件～</p>\n<p>好了我们确定了本次修改就提交吧～步骤同上，不再重复，看大家能自己学会提交么，提交完后我们看下 log 日志</p>\n<p>注意下命令行中用到的符号都必须是英文符号噢</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_log_2.png\" alt=\"添加正文后的log\"></p>\n<h3 id=\"在不同版本间切换\"><a href=\"#在不同版本间切换\" class=\"headerlink\" title=\"在不同版本间切换\"></a>在不同版本间切换</h3><p>前面的一切都在为后面的操作铺路～上面的功能好像除了纪录下每次的修改并没有其他的卵用啊，假设现在我们有个需求，是要看最开始创建的那个版本，也就是只写了一行字的那个，怎么办？下面教一个流弊的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout xxx</div></pre></td></tr></table></figure>\n<p>xxx 具体是什么呢？先不提，因为 checkout 有很多种用法，还记得前面讲  git log 的那张图里面，每一个纪录都有一个独一无二的 id 么？</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_log_2.png\" alt=\"两次修改的日志\"></p>\n<p>找到第一次提交的纪录的 id，复制下来，将 xxx 换成这个 id</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_checkout_commit.png\" alt=\"chekout 第一次提交\"></p>\n<p>再打开我们的 初版.txt 看看</p>\n<p>是不是又回到第一次提交时的样子啦？来看下仓库的状态：</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_status_6.png\" alt=\"checkout 后的状态\"></p>\n<p>有没有看到一行红字，<code>HEAD detached at 3d6fe3c</code>，后面的那个乱码其实是这个纪录的 id 的前几位，不信你去看 log，HEAD 就像是一个指针，这个指针指到哪儿，文件就变成那个时候的样子，怎么样，是不是很流弊？这时候你再查看 log 会发现第二次的提交不见了，不要惊慌，因为在当前的这个提交上面还没有第二个提交纪录呢</p>\n<p>那么怎么切换回第二次，也就是最新的那个版本呢？</p>\n<p>这里就要引入一个分支的概念了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch</div></pre></td></tr></table></figure>\n<p>输入这个命令查看当前仓库中的分支</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_branch_1.png\" alt=\"分支查看\"></p>\n<p>绿色的，前面有 ＊ 号的，就是我们当前所在的分支，另外我们还看到还有一个 master 分支，在没有进行分支指定的情况下是默认在 master 分支上，可以把这个分支看成是主分支，而我们目前所在的这个分支只是一个临时分支，供我们切换到某个版本上面而不影响主分支上的内容，那么现在就让我们切换到主分支上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout master</div></pre></td></tr></table></figure>\n<p>然后再查看我们的 log ，发现第二次提交的纪录也回来了，打开初版可以看到恢复到最新的版本了。</p>\n<p>这时候再来查看下分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch</div></pre></td></tr></table></figure>\n<p>会发现我们已经到 master 分支上面了，并且之前的那个临时分支已经不见了～</p>\n<h3 id=\"分支开发\"><a href=\"#分支开发\" class=\"headerlink\" title=\"分支开发\"></a>分支开发</h3><p>前面引入了一个分支的概念，现在要好好讲讲分支的作用，这是 Git 比较精华的部分。先举个在程序开发中的例子</p>\n<p><strong>通常在程序开发中会有三个主要的分支，分别是 master ，develop，test，从字面理解就是主分支，开发分支，和测试分支。什么意思呢？</strong></p>\n<p><strong>举个例子，假设我们有个 app 在应用市场的版本是 1.0.0 ，现在我们要开发 1.1.0，怎么做呢？从 master 分支切出一个 develop 分支，在 develop 分支上面去开发 1.1.0 的功能，为什么呢？你想，如果我们直接在 1.0.0 的代码上去开发，如果线上版本有一个重大 bug ，需要紧急修复，而 1.1.0 的功能又只开发了一半，这时候就很尴尬了，可是如果我们在单独的分支上开发 1.1.0，这时候就可以很轻松的在 master 分支上修改bug 重新发一个新的 1.0.0 版本，再接着在 develop 分支上开发 1.1.0，互相不干扰～</strong></p>\n<p>同样，我们在写论文的时候可能也有这个需求，比如你现在已经写了一个能看的版本了（给老师，老板检查之类的），但是你又想再加一点新的东西进去，可是又不希望被老师／老板突然抽查发现你还有的没写完，这样就不完美了。</p>\n<p>利用上面的思路，我们也可以在 master 上是你能看的版本，再切一个单独的分支来加新的东西，这样即便被突然检查也可以很轻松的切换到 master 上面给老师看一个完成版～</p>\n<p>所以我们先要明确两个分支的任务</p>\n<ul>\n<li>master — 这个分支上的每一个版本都应该是完成度较高的（1.0，1.1，1.2，1.3。。。）</li>\n<li>develop — 这个分支上用来加一些东西，或者是修改一些东西，是你真正去写论文的分支</li>\n</ul>\n<p>有好事的同学问了，master 上同时可以保存 1.0，1.1，1.2 等等不同的版本么？当然可以，还记得前面我们任意切换到一个 commit 上吧？不过 当你写到 1.3 版本的时候，可能就已经有非常多的 commit 了，如何精确的跳到一个完成版上面，后面会教大家。</p>\n<p>首先查看分支的命令还记得是什么？</p>\n<h4 id=\"新建分支，切换\"><a href=\"#新建分支，切换\" class=\"headerlink\" title=\"新建分支，切换\"></a>新建分支，切换</h4><p>现在来创建一个新的分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch develop</div></pre></td></tr></table></figure>\n<p>后面的 develop 是分支名，这个名字由你来定，需要注意的是，我们当前在 master 分支上去切一个新的分支，这个分支是基于 master 分支的，也就是 master 分支上有的东西，它都有。</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_branch_2.png\" alt=\"新建分支\"></p>\n<p>可以看到已经创建了一个新的分支，现在 checkout 到这个分支上去吧</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_checkout_branch.png\" alt=\"切换分支\"></p>\n<p>查看 log  可以看到，master 上面的提交，这个分支上都有，对吧。</p>\n<p>现在我们就可以愉快的在这个分支上疯狂的输出了，打开文件，写点东西</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/file_3.png\" alt=\"develop 修改\"></p>\n<p>修改完了，怎么提交？不需要再说了吧</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_log_3.png\" alt=\"develop log\"></p>\n<p>现在问题来了，我怎么把 develop 上面的修改弄到 master 上面去呢？</p>\n<h4 id=\"分支合并\"><a href=\"#分支合并\" class=\"headerlink\" title=\"分支合并\"></a>分支合并</h4><p>很简单，一个分支要想更新到另一个分支所在的版本，合并下这个分支就好了</p>\n<p>所以，首先我们要切换到 master 分支上面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout master</div></pre></td></tr></table></figure>\n<p>然后合并 develop 分支上面的改动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git merge develop</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_checkout_branch_2.png\" alt=\"合并分支\"></p>\n<p>git 会提示我有一个文件发生了改变，这时候再看看log，是不是有了第三次提交的纪录呢？</p>\n<h3 id=\"版本标注\"><a href=\"#版本标注\" class=\"headerlink\" title=\"版本标注\"></a>版本标注</h3><p>前面说了，会教大家如何表明一个版本，比如现在我们有了三次修改纪录，但第三次提交时才完成了我们的 1.0，当我们写到 5.0 的时候，可能有上百个提交，我怎么能精确的记住 1.0 在哪次提交纪录上呢？</p>\n<p>很简单我们在完成了 1.0 的这次纪录上添加一个标记，来标明它是 1.0 的版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag xxx</div></pre></td></tr></table></figure>\n<p>xxx 即是你要的标记</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_tag_1.png\" alt=\"tag 标记\"></p>\n<p>OK～添加完成，怎么看呢？简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag</div></pre></td></tr></table></figure>\n<p>就可以看到你当前有多少个 tag 了。有同学问了，我可以在这一次纪录上多打几个标记么？当然可以，只要你开心～</p>\n<p>如果要删除某个 tag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag -d xxx</div></pre></td></tr></table></figure>\n<p>来实操一下，咱们已经添加了一个 1.0 的 tag 了。现在来多提交几次，看看能不能回到 1.0 版本。</p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/file_4.png\" alt=\"完成了多个版本\"></p>\n<p><img src=\"http://7xtakx.com1.z0.glb.clouddn.com/git_log_5.png\" alt=\"多个版本的 log\"></p>\n<p>现在我们已经提交了两次，完成了两个版本，这里为了方便我们都是直接在 master 上提交的哈。</p>\n<p>来看看怎么切换回 1.0，有的同学可能已经猜到了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout 1.0</div></pre></td></tr></table></figure>\n<p>这个 checkout 是不是很流弊啊。</p>\n<p>再打开初版.txt看看，是不是回到了 1.0 版本呢？</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>到这里已经教给了大家 git 常用的这些操作，当然 git 的操作远不止这些，本篇文章的目的只是带你入门，当你入门了以后就可以通过看官方文档或者专业一点的  git 介绍来深入学习，对了～目标里面的最后一条，我会放到下一篇文章中来单独讲解，如果你特别感兴趣可以自行 Google  Github～</p>\n<p>当然，如果你对命令行操作实在感到困难，也可以使用图形化的 Git 工具来帮助操作，前提是你得理解这些命令的作用噢～</p>\n<h3 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h3><p><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">Git-Book</a></p>\n<p><a href=\"https://my.oschina.net/amstrong/blog/159114\" target=\"_blank\" rel=\"external\">图形化工具集合</a></p>\n"}