{"tags":[],"categories":[{"name":"Android源码学习","permalink":"https://joesteven.github.io/categories/Android源码学习/","url":"/async/categories/Android源码学习.json","count":10}],"url":"/async/posts/rxjava_source.json","date":1467896594000,"path":{"year":2016,"month":7,"day":7,"name":"rxjava_source"},"title":"RxJava 源码学习笔记","permalink":"https://joesteven.github.io/rxjava_source/","content":"<p>转载请附原文链接： <a href=\"http://extremej.itscoder.com/rxjava_source/\" target=\"_blank\" rel=\"external\">RxJava 源码学习笔记</a></p>\n<p><a href=\"http://extremej.itscoder.com/how_to_use_rxjava/\" target=\"_blank\" rel=\"external\">RxJava 使用简介</a><br>学习了 RxJava有一段时间了，也在自己的项目中全面替换使用，整个项目的代码结构和质量确实有很大的改观，这么牛逼的一个框架，不仅要知其然，更要知其所以然。阅读源码学习原理也是很有必要的，这篇文章算是学习记录吧，圈内已有很多大神的文章深入分析了RxJava的原理，吾等小辈，不敢造次。</p>\n<p>如果你还在学习RxJava的使用，可以看看我上一篇文章，希望能有所帮助</p>\n<h4 id=\"一次完整订阅\"><a href=\"#一次完整订阅\" class=\"headerlink\" title=\"一次完整订阅\"></a>一次完整订阅</h4><p>observable被create创建的时候，传入一个OnSubscribe对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Observable&lt;T&gt; <span class=\"title\">create</span><span class=\"params\">(OnSubscribe&lt;T&gt; f)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observable&lt;T&gt;(hook.onCreate(f));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至于这个hook，是RxJavaObservableExecutionHook，RxJavaPlugins中的一个类，用于插入一些你所需要的代码，记录，测试等，在默认的情况下，没有做任何事情,以下是官方文档给出的解释：</p>\n<blockquote>\n<p>This plugin allows you to register functions that RxJava will call upon certain regular RxJava activities, for instance for logging or metrics-collection purposes. </p>\n</blockquote>\n<p>所以目前不需要管这个钩子。在文章后面如果出现其他类型的hook不再作解释</p>\n<p>来看看OnSubscribe是个什么东西，继承了Action1接口，接口中只有一个方法call，这个方法什么时候被调用，我们慢慢来看。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Invoked when Observable.subscribe is called.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnSubscribe</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Action1</span>&lt;<span class=\"title\">Subscriber</span>&lt;? <span class=\"title\">super</span> <span class=\"title\">T</span>&gt;&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// cover for generics insanity</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们知道当调用了Observable的subscribe()方法后，Observable开始发送数据，那call应该就是在subscribe()时调用的，来看代码（onStart前面是判断参数为空抛异常的代码，没有放上来）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Subscription <span class=\"title\">subscribe</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> T&gt; subscriber, Observable&lt;T&gt; observable)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    subscriber.onStart();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (!(subscriber <span class=\"keyword\">instanceof</span> SafeSubscriber)) &#123;</div><div class=\"line\">        subscriber = <span class=\"keyword\">new</span> SafeSubscriber&lt;T&gt;(subscriber);</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        hook.onSubscribeStart(observable, observable.onSubscribe).call(subscriber);</div><div class=\"line\">        <span class=\"keyword\">return</span> hook.onSubscribeReturn(subscriber);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">        Exceptions.throwIfFatal(e);</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            subscriber.onError(hook.onSubscribeError(e));</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e2) &#123;</div><div class=\"line\">            Exceptions.throwIfFatal(e2);</div><div class=\"line\">            RuntimeException r = <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Error occurred attempting to subscribe [\"</span> + e.getMessage() + <span class=\"string\">\"] and then again while trying to pass to onError.\"</span>, e2);</div><div class=\"line\">            hook.onSubscribeError(r);</div><div class=\"line\">            <span class=\"keyword\">throw</span> r;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> Subscriptions.unsubscribed();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>首先调用了Subscriber的onStart方法，我们的订阅前的准备代码就是在这里执行，接着判断subscriber是否是 SafeSubscriber的子类，如果不是的话，转成这个类，SafeSubscriber又是什么？</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; SafeSubscriber is a wrapper around Subscriber that ensures that the Subscriber complies with the Observable contract</div><div class=\"line\">&gt; http://reactivex.io/documentation/contract.html</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>简单翻译，是为了使 Subscriber遵守Observable的某种规则而进行的一次封装，保证onComplete和onError互斥，onNext在onComplete不再发送数据，对异常做了一些操作等等。</p>\n<p>接着往下看调用了OnSubscribe.call(),开始执行call中的代码，并且做了一些异常处理，返回一个Subscription对象用于管理这次订阅</p>\n<p>用过RxJava的同学应该知道，Subscriber是实现自Observer接口的抽象类，在subscribe时也可以就传入一个observer对象，其实RxJava还是会使用一个subscriber去订阅事件，然后将数据简单的向前传递给这个observer，其他的不同参数的subscribe都是同样的处理方式；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Subscription <span class=\"title\">subscribe</span><span class=\"params\">(<span class=\"keyword\">final</span> Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (observer <span class=\"keyword\">instanceof</span> Subscriber) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> subscribe((Subscriber&lt;? <span class=\"keyword\">super</span> T&gt;)observer);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> subscribe(<span class=\"keyword\">new</span> Subscriber&lt;T&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            observer.onCompleted();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">            observer.onError(e);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(T t)</span> </span>&#123;</div><div class=\"line\">            observer.onNext(t);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>知道了一个完整订阅流程在内部时怎么实现的之后，我们来看一下通过其他的方法创建Observable进行发射数据有什么不同。</p>\n<ul>\n<li>just()<ul>\n<li>一个参数 </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>多个参数 — 实际是执行了from()</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//一个参数</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Observable&lt;T&gt; <span class=\"title\">just</span><span class=\"params\">(<span class=\"keyword\">final</span> T value)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ScalarSynchronousObservable.create(value);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//ScalarSynchronousObservable的构造方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">ScalarSynchronousObservable</span><span class=\"params\">(<span class=\"keyword\">final</span> T t)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"keyword\">new</span> OnSubscribe&lt;T&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> T&gt; s)</span> </span>&#123;</div><div class=\"line\">                s.setProducer(createProducer(s, t));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">this</span>.t = t;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>一颗赛艇，重写了call方法，调用了subscriber.setProducer(),所以这是个什么方法？干什么用的？从方法名上理解，是给当前的 Subscriber设置了一个producer（提供者）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setProducer</span><span class=\"params\">(Producer p)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">long</span> toRequest;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> passToSubscriber = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        toRequest = requested;</div><div class=\"line\">        producer = p;</div><div class=\"line\">        <span class=\"keyword\">if</span> (subscriber != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// middle operator ... we pass thru unless a request has been made</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (toRequest == NOT_SET) &#123;</div><div class=\"line\">                <span class=\"comment\">// we pass-thru to the next producer as nothing has been requested</span></div><div class=\"line\">                passToSubscriber = <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// do after releasing lock</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (passToSubscriber) &#123;</div><div class=\"line\">        subscriber.setProducer(producer);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// we execute the request with whatever has been requested (or Long.MAX_VALUE)</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (toRequest == NOT_SET) &#123;</div><div class=\"line\">            producer.request(Long.MAX_VALUE);<span class=\"comment\">//执行到这句</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            producer.request(toRequest);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上面的代码会执行到producer.request(Long.MAX_VALUE),Producer是一个接口，里面只有一个方法request(long n) — n 是你希望该Producer所提供数据数量的最大值，我们再回到just()中所用到的SingleProducer来看看它是怎么实现的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**注意这里贴出的只是核心代码，并不是完整的源代码*/</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">(<span class=\"keyword\">long</span> n)</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> Subscriber&lt;? <span class=\"keyword\">super</span> T&gt; c = child;</div><div class=\"line\">           T v = value;</div><div class=\"line\">           <span class=\"comment\">// eagerly check for unsubscription</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (c.isUnsubscribed()) &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"comment\">// emit the value</span></div><div class=\"line\">           <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">               c.onNext(v);</div><div class=\"line\">           &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">               Exceptions.throwOrReport(e, c, v);</div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"comment\">// eagerly check for unsubscription</span></div><div class=\"line\">           <span class=\"keyword\">if</span> (c.isUnsubscribed()) &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"comment\">// complete the child</span></div><div class=\"line\">           c.onCompleted();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>这段代码看懂的难度不大</p>\n<ul>\n<li>from()</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Observable&lt;T&gt; <span class=\"title\">from</span><span class=\"params\">(T[] array)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = array.length;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> empty();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> just(array[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> create(<span class=\"keyword\">new</span> OnSubscribeFromArray&lt;T&gt;(array));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>from方法传入一个数组，如果数组长度为0，则返回empty()— 一个不发射数据的Observable,如果数组只有一个元素，就返回just方法创建的Observable，我们稍后看just，最后一句代码，create时创建了一个OnSubscribeFromArray对象，这个类是OnSubscribe的一个实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> T&gt; child)</span> </span>&#123;</div><div class=\"line\">    child.setProducer(<span class=\"keyword\">new</span> FromArrayProducer&lt;T&gt;(child, array));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>同just()一样也是通过setProducer的方法来发射数据，但是FromArrayProducer的request()方法里面用到了一个BackpressureUtils来处理，关于<a href=\"http://www.dundunwen.com/article/275b1d92-f9da-4bb8-b111-3aa8a6ace245.html\" target=\"_blank\" rel=\"external\">Backpressure</a> ，大概是一种处理堆积消息的策略，有兴趣的可以看看这篇文章。</p>\n<h4 id=\"Observable的转换-—-lift-compose\"><a href=\"#Observable的转换-—-lift-compose\" class=\"headerlink\" title=\"Observable的转换 — lift(),compose()\"></a>Observable的转换 — lift(),compose()</h4><ul>\n<li><p>map()</p>\n<p>先从我们最熟悉的操作符map开始，map实际调用了一个方法lift()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> &lt;R&gt; <span class=\"function\">Observable&lt;R&gt; <span class=\"title\">map</span><span class=\"params\">(Func1&lt;? <span class=\"keyword\">super</span> T, ? extends R&gt; func)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> lift(<span class=\"keyword\">new</span> OperatorMap&lt;T, R&gt;(func));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>flatMap()</p>\n<p>然后来看看flatMap(),调用了merge()，传入了一个参数lift()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> &lt;U, R&gt; <span class=\"function\">Observable&lt;R&gt; <span class=\"title\">flatMap</span><span class=\"params\">(<span class=\"keyword\">final</span> Func1&lt;? <span class=\"keyword\">super</span> T, ? extends Observable&lt;? extends U&gt;&gt; collectionSelector,</span></span></div><div class=\"line\">        <span class=\"keyword\">final</span> Func2&lt;? <span class=\"keyword\">super</span> T, ? <span class=\"keyword\">super</span> U, ? extends R&gt; resultSelector) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> merge(lift(<span class=\"keyword\">new</span> OperatorMapPair&lt;T, U, R&gt;(collectionSelector, resultSelector)));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>merge()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">Observable&lt;T&gt; <span class=\"title\">merge</span><span class=\"params\">(Observable&lt;? extends Observable&lt;? extends T&gt;&gt; source)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (source.getClass() == ScalarSynchronousObservable.class) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ((ScalarSynchronousObservable&lt;T&gt;)source).scalarFlatMap((Func1)UtilityFunctions.identity());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> source.lift(OperatorMerge.&lt;T&gt;instance(<span class=\"keyword\">false</span>));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>merge中也调用了lift()函数，实际上大部分对Observable进行操作的操作符几乎都是用到了这个函数，那么我们来看看lift()到底做了什么</p>\n</li>\n<li><p><strong>lift()</strong> </p>\n<blockquote>\n<p>Lifts a function to the current Observable and returns a new Observable that when subscribed to will pass  the values of the current Observable through the Operator function.</p>\n</blockquote>\n<p>源码中的注释，简单翻译一下，这段话大概的意思是按照这个操作符的规则来将当前的Observable替换为一个新的Observable</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//部分注释被删掉了</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> &lt;R&gt; <span class=\"function\">Observable&lt;R&gt; <span class=\"title\">lift</span><span class=\"params\">(<span class=\"keyword\">final</span> Operator&lt;? extends R, ? <span class=\"keyword\">super</span> T&gt; operator)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Observable&lt;R&gt;(<span class=\"keyword\">new</span> OnSubscribe&lt;R&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> R&gt; o)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                Subscriber&lt;? <span class=\"keyword\">super</span> T&gt; st = hook.onLift(operator).call(o);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// new Subscriber created and being subscribed with so 'onStart' it</span></div><div class=\"line\">                    st.onStart();</div><div class=\"line\">                    onSubscribe.call(st);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">                    Exceptions.throwIfFatal(e);</div><div class=\"line\">                    st.onError(e);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">                Exceptions.throwIfFatal(e);</div><div class=\"line\">                o.onError(e);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这段代码乍一看一脸懵逼，我们先看看Operator是个什么鬼</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Operator</span>&lt;<span class=\"title\">R</span>, <span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Func1</span>&lt;<span class=\"title\">Subscriber</span>&lt;? <span class=\"title\">super</span> <span class=\"title\">R</span>&gt;, <span class=\"title\">Subscriber</span>&lt;? <span class=\"title\">super</span> <span class=\"title\">T</span>&gt;&gt; </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// cover for generics insanity</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Operator接口继承自Func1接口，做了一件事情，将泛型指定为两个Subscriber,这时候我们再去看lift中的代码，好像明白怎么回事了</p>\n<p>首先new了一个新的OnSubscribe对象，泛型指定为转换后的数据类型，注意了，<strong>operator.call返回了一个Subscriber对象，泛型是原始的Observable所发射的数据，然后调用了原始的Observable中的onSubscribe.call()将数据发射出去</strong>。</p>\n<p>原始的数据发射到哪儿去了呢？来看OperatorMap中的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperatorMap</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">R</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Operator</span>&lt;<span class=\"title\">R</span>, <span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">final</span> Func1&lt;? <span class=\"keyword\">super</span> T, ? extends R&gt; transformer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OperatorMap</span><span class=\"params\">(Func1&lt;? <span class=\"keyword\">super</span> T, ? extends R&gt; transformer)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.transformer = transformer;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Subscriber&lt;? <span class=\"keyword\">super</span> T&gt; call(<span class=\"keyword\">final</span> Subscriber&lt;? <span class=\"keyword\">super</span> R&gt; o) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Subscriber&lt;T&gt;(o) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                o.onCompleted();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">                o.onError(e);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(T t)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    o.onNext(transformer.call(t));</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">                    Exceptions.throwOrReport(e, <span class=\"keyword\">this</span>, t);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我看到这段代码的时候有种醍醐灌顶的感觉啊，是不是很6，subscriber将数据传递给transformer，让我们在Func1中处理相关逻辑</p>\n</li>\n</ul>\n<p>关于lift的原理，看看扔物线大神的文章<a href=\"http://gank.io/post/560e15be2dca930e00da1083#toc_19\" target=\"_blank\" rel=\"external\">变换的原理</a> ,里面的图解很好的解释了lift的流程</p>\n<ul>\n<li>compose() — 上一篇用法学习的时候已经讲过，不再赘述，<a href=\"http://extremej.itscoder.com/how_to_use_rxjava/\" target=\"_blank\" rel=\"external\">传送门</a> </li>\n</ul>\n<h4 id=\"线程转换\"><a href=\"#线程转换\" class=\"headerlink\" title=\"线程转换\"></a>线程转换</h4><p>线程转换的原理其实也是使用lift()去转换，关于流程原理可以参考<a href=\"http://gank.io/post/560e15be2dca930e00da1083#toc_22\" target=\"_blank\" rel=\"external\">Scheduler的原理</a>,线程转换的内部实现，代码较多，打算放到下一篇文章中，专门分析学习。</p>\n"}