{"tags":[],"categories":[{"name":"Android源码学习","permalink":"https://joesteven.github.io/categories/Android源码学习/","url":"/async/categories/Android源码学习.json","count":12}],"url":"/async/posts/what-s-inside-livedata.json","date":1615363134000,"path":{"year":2021,"month":3,"day":10,"name":"what-s-inside-livedata"},"title":"What's inside?-LiveData","permalink":"https://joesteven.github.io/what-s-inside-livedata/","content":"<p>距离上一次更新博客已经过去很久了，其实中间也有写一些东西但是没有认真发布到博客上，希望能坚持初心，把博客当作学习记录来激励自己持续学习。</p>\n<ul>\n<li>当 LiveData 更新 value 的时候实际发生了什么？</li>\n<li>LiveData 是如何绑定观察者的生命周期的？</li>\n<li>当我们订阅 LiveData 时，为什么只有当前观察者收到数据？</li>\n</ul>\n<p>也许在使用 LiveData 时还有其他的问题，而所有问题的答案几乎都清楚的写在源码里。本篇文章中阅读的为<code>androidx.lifecyle:lifecycle-livedata-core:2.2.0</code> 中的 LiveData</p>\n<h3 id=\"一、构造-LiveData\"><a href=\"#一、构造-LiveData\" class=\"headerlink\" title=\"一、构造 LiveData\"></a>一、构造 LiveData</h3><p>构造 LiveData 有两种方式，一种使用默认构造函数，另一种可以在构造时初始化value的值。构造函数的内容很简单，初始化了<code>mData</code> 和 <code>mVersion</code>，我们这里先记住这个 <code>mVersion</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LiveData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mData = NOT_SET;</div><div class=\"line\">        mVersion = START_VERSION;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LiveData</span><span class=\"params\">(T value)</span> </span>&#123;</div><div class=\"line\">        mData = value;</div><div class=\"line\">        mVersion = START_VERSION + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> START_VERSION = -<span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"二、订阅-LiveData\"><a href=\"#二、订阅-LiveData\" class=\"headerlink\" title=\"二、订阅 LiveData\"></a>二、订阅 LiveData</h3><p>订阅通常也有两种方式，一种是<code>observe</code>传入 <code>LifecycleOwner</code> 另一种是<code>observerForever</code>。 先从 observe 开始看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@MainThread</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">observe</span><span class=\"params\">(@NonNull LifecycleOwner owner, @NonNull Observer&lt;? <span class=\"keyword\">super</span> T&gt; observer)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">  \t<span class=\"comment\">// 首先检查是否在主线程调用的该函数</span></div><div class=\"line\">    assertMainThread(<span class=\"string\">\"observe\"</span>);</div><div class=\"line\">  \t</div><div class=\"line\">  \t<span class=\"comment\">// 如果传入的 lifecycle owner 的状态是 destoryed，就取消本次订阅</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</div><div class=\"line\">        <span class=\"comment\">// ignore</span></div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"comment\">// 使用传入的两个参数构造了一个 LifecycleBoundObserver， 即一个包装类</span></div><div class=\"line\">    LifecycleBoundObserver wrapper = <span class=\"keyword\">new</span> LifecycleBoundObserver(owner, observer);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 将传入的observer 和刚刚构造的 wrapper 存入到 mObservers 中</span></div><div class=\"line\">    ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 如果existing 不为空，并且没有绑定到传入的owner上，说明之前已经绑定了另一个生命周期宿主</span></div><div class=\"line\">  <span class=\"comment\">// 不允许同时绑定多个宿主，抛错误</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Cannot add the same observer\"</span></div><div class=\"line\">                + <span class=\"string\">\" with different lifecycles\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">if</span> (existing != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 到这一步就说明之前已经成功订阅过了，直接返回，不进行后续操作</span></div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 将wrapper和宿主的生命周期进行绑定</span></div><div class=\"line\">    owner.getLifecycle().addObserver(wrapper);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的代码逻辑很简单，里面出现了几个我们可能关心的类或变量：<code>mObservers</code>， <code>LifecycleBoundObserver</code>。</p>\n<p>其中 <code>mObservers</code> 是 <code>SafeIterableMap</code>， 实际是个链表假装的 Map，这里不展开。key 是 observer，也就是上面方法中传进来的第二个参数，value 是<code>ObserverWrapper</code>。</p>\n<p>另一个 <code>LifecycleBoundObserver</code>  就比较关键了，从上面的信息可以推出它是<code>ObserverWrapper</code>  的一个子类。我们先从 <code>owner.getLifecycle().addObserver(wrapper);</code> 这个代码作为入口来看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这里面还有一些 lifecycle 的逻辑，这里先去掉不看</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchEvent</span><span class=\"params\">(LifecycleOwner owner, Event event)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 最终调用到  ObserverWithState 的 dispatchEvent 方法中来</span></div><div class=\"line\">  <span class=\"comment\">//...</span></div><div class=\"line\">  \t\t\t\t<span class=\"comment\">// 调用 lifecycleObserver 的onStateChanged 方法</span></div><div class=\"line\">            mLifecycleObserver.onStateChanged(owner, event);</div><div class=\"line\">            mState = newState;</div><div class=\"line\">  <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>既然 <code>addObserver</code> 可以把 <code>wrapper</code> 作为参数传入，那就说明它实现了 <code>LifecycleEventObserver</code> 接口，<strong>这里就解释了开头的第二个问题</strong>，让我们进入到<code>LifecycleBoundObserver</code> 类中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStateChanged</span><span class=\"params\">(@NonNull LifecycleOwner source,</span></span></div><div class=\"line\">        @NonNull Lifecycle.Event event) &#123;</div><div class=\"line\">  <span class=\"comment\">// 当宿主的生命周期发生改变时或者刚刚绑定时会回调这个方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mOwner.getLifecycle().getCurrentState() == DESTROYED) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果宿主的状态时 destroyed， 移除观察者</span></div><div class=\"line\">        removeObserver(mObserver);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"comment\">// 关键代码</span></div><div class=\"line\">    activeStateChanged(shouldBeActive());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>先看<code>shouldBeActive()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldBeActive</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//  状态至少要大于等于 STARTED， 进入到 State 这个枚举类中可以发现这里指的状态</span></div><div class=\"line\">  <span class=\"comment\">// 其实就只有两种，处于 STARTED 或者 RESUMED 才认为当前的观察者是 active</span></div><div class=\"line\">    <span class=\"keyword\">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>再来看<code>activeStateChanged()</code>， 这个方法在抽象类 <code>ObserverWrapper</code>  中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activeStateChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> newActive)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 判断当前状态是否改变，没有改变就不执行后面的逻辑</span></div><div class=\"line\">  <span class=\"comment\">// mActive 初始化状态为false，因此刚订阅的时候会跳过这个判断</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (newActive == mActive) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// immediately set active state, so we'd never dispatch anything to inactive</span></div><div class=\"line\">    <span class=\"comment\">// owner</span></div><div class=\"line\">  <span class=\"comment\">// 上面的英文注释为原代码中的注释，很好理解，这里就是先立马同步状态</span></div><div class=\"line\">    mActive = newActive;</div><div class=\"line\">  <span class=\"comment\">// 判断当前 LiveData 是否为未激活状态，这里不理解没关系，继续往后看</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> wasInactive = LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"comment\">// 如果当前这个观察者的状态为 active，就给 LiveData 的 mActiveCount 加一，否则就减一</span></div><div class=\"line\">    LiveData.<span class=\"keyword\">this</span>.mActiveCount += mActive ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"comment\">// 如果 LiveData 之前的状态是未激活，而当前这个观察者的状态为激活，</span></div><div class=\"line\">  <span class=\"comment\">// 说明LiveData的状态马上要变成激活状态了， 回调 onActive 函数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (wasInactive &amp;&amp; mActive) &#123;</div><div class=\"line\">        onActive();</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"comment\">// 和上面的逻辑相反，同理当 LiveData 所有的观察者都进入为激活状态后，</span></div><div class=\"line\">  <span class=\"comment\">// 这个 LiveData 的状态也进入未激活，回调 onInactive 函数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (LiveData.<span class=\"keyword\">this</span>.mActiveCount == <span class=\"number\">0</span> &amp;&amp; !mActive) &#123;</div><div class=\"line\">        onInactive();</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"comment\">// 上面的代码都是为了回调一些状态函数，可以类比为 LiveData 的生命周期函数</span></div><div class=\"line\">  <span class=\"comment\">// 下面才进入到和这个观察者切身相关的代码</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mActive) &#123;</div><div class=\"line\">      <span class=\"comment\">// 从函数名字可以看出这里是在分发数据，并且传入了this即这个ObserverWrapper</span></div><div class=\"line\">        dispatchingValue(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的代码我们可以知道一个 LiveData 很关键的点，当回调 <code>onInactive</code> 或者 Livedata 的 <code>mActiveCount</code> 为 0 的时候，并不是说 LiveData 没有观察者，而是它所有的观察者当前都处于未激活状态，这里千万不要搞混淆了。</p>\n<p>另外可以看到这里可能会触发一次<code>value</code> 的分发，这里就解释了开篇第三个问题的一半，<strong>当我们第一次订阅LiveData的时候，会去绑定生命周期，然后会回调到 onStateChanged，当处于active后就会触发一次value的分发</strong></p>\n<h3 id=\"三、当-setValue的时候发生了什么\"><a href=\"#三、当-setValue的时候发生了什么\" class=\"headerlink\" title=\"三、当 setValue的时候发生了什么\"></a>三、当 setValue的时候发生了什么</h3><p>第二个部分我们已经可以得出分发<code>value</code>是通过<code>dispatchingValue();</code>方法来实现的，那<code>setValue</code> 和<code>postValue</code> 应该最终都会调用这个函数，我们先看 <code>setValue</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@MainThread</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(T value)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 该方法只能在主线程调用</span></div><div class=\"line\">    assertMainThread(<span class=\"string\">\"setValue\"</span>);</div><div class=\"line\">  <span class=\"comment\">// 更新版本号</span></div><div class=\"line\">    mVersion++;</div><div class=\"line\">  <span class=\"comment\">// 更新 mData 的值</span></div><div class=\"line\">    mData = value;</div><div class=\"line\">  <span class=\"comment\">// 分发数据</span></div><div class=\"line\">    dispatchingValue(<span class=\"keyword\">null</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的代码很简单，所以核心在 <code>dispatchingValue(null);</code> 中，大家细心一点可以发现这里传入的参数为<code>null</code> ，而上面<code>ObserverWrapper</code> 传入的参数为 <code>this</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 参数为 ObserverWraper</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchingValue</span><span class=\"params\">(@Nullable ObserverWrapper initiator)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 先看后面，最后再返回来看这里</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (mDispatchingValue) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果当前正在分发，就标记当前分发失效</span></div><div class=\"line\">          mDispatchInvalidated = <span class=\"keyword\">true</span>;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 标记当前正在分发数据</span></div><div class=\"line\">      mDispatchingValue = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"comment\">// do..while 这个循环至少会执行一次</span></div><div class=\"line\">      do &#123;</div><div class=\"line\">        <span class=\"comment\">// 标记为正常分发状态</span></div><div class=\"line\">          mDispatchInvalidated = <span class=\"keyword\">false</span>;</div><div class=\"line\">        </div><div class=\"line\">          <span class=\"keyword\">if</span> (initiator != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// 关键点：如果传入的参数不为空</span></div><div class=\"line\">            <span class=\"comment\">// 字面理解：考虑通知这个观察者</span></div><div class=\"line\">              considerNotify(initiator);</div><div class=\"line\">              initiator = <span class=\"keyword\">null</span>;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 如果传入的参数为空，遍历之前我们订阅时存储观察者的那个map</span></div><div class=\"line\">              <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class=\"keyword\">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =</div><div class=\"line\">                      mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</div><div class=\"line\">                <span class=\"comment\">//考虑通知这个观察者</span></div><div class=\"line\">                  considerNotify(iterator.next().getValue());</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"comment\">// 如果分发状态被标记为失效了，跳出这次遍历通知的逻辑</span></div><div class=\"line\">                  <span class=\"keyword\">if</span> (mDispatchInvalidated) &#123;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        <span class=\"comment\">// 当分发状态标记为失效时 循环do中的逻辑</span></div><div class=\"line\">      &#125; <span class=\"keyword\">while</span> (mDispatchInvalidated);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 标记分发完成</span></div><div class=\"line\">      mDispatchingValue = <span class=\"keyword\">false</span>;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>上面的代码主要有三个点</p>\n<ul>\n<li>当传入了 wrapper 就会只通知这个观察者，也就解释了开头第三个问题</li>\n<li>这个分发考虑一个多次分发value的问题，而处理的方式是停止前一次的分发，立即进入下一次的分发。比如第一次分发开始，紧接着更新了value，调用 <code>dispatchingValue</code>，这时候会发现当前正在分发，于是将<code>mDispatchInvalidated</code> 标记为 true， 第一次分发在for循环中发现本次分发失效了，跳出for循环，然后while循环判断通过将再一次执行do中的代码，这时候会将<code>mDispatchInvalidated</code>标记为false，顺利的走完for循环中的逻辑，跳出while循环，最后标记分发完成。</li>\n<li>无论是通知一个还是通知全部，都进入到了<code>considerNotify(wrapper)</code>; 这个函数中</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">considerNotify</span><span class=\"params\">(ObserverWrapper observer)</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 这里面的代码就很好理解了，保留了原代码中的英文注释</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> (!observer.mActive) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果当前observer 的状态为未激活 CREATED, STOPED, PAUSED </span></div><div class=\"line\">      <span class=\"comment\">// 注意 DESTORYED 不在未激活状态中，会直接移除 observer</span></div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// we still first check observer.active to keep it as the entrance for events. So even if</span></div><div class=\"line\">    <span class=\"comment\">// the observer moved to an active state, if we've not received that event, we better not</span></div><div class=\"line\">    <span class=\"comment\">// notify for a more predictable notification order.</span></div><div class=\"line\">  <span class=\"comment\">// 英文注释解释得很清楚了，有可能宿主进入了未激活状态，但是并没有回调 onStateChanged</span></div><div class=\"line\">  <span class=\"comment\">// 或者因为某些原因导致没有收到event，所以这里需要手动调用一次来进行判断</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!observer.shouldBeActive()) &#123;</div><div class=\"line\">        observer.activeStateChanged(<span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"comment\">// 对比当前分发数据的版本号和该观察者当前持有的版本号</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (observer.mLastVersion &gt;= mVersion) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"comment\">// 更新观察者的版本号</span></div><div class=\"line\">    observer.mLastVersion = mVersion;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">// 回调给观察者 value</span></div><div class=\"line\">    observer.mObserver.onChanged((T) mData);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>上面的代码就解释了开头的第一个问题</strong></p>\n<h3 id=\"四、扩展问题\"><a href=\"#四、扩展问题\" class=\"headerlink\" title=\"四、扩展问题\"></a>四、扩展问题</h3><h4 id=\"postValue-是如何实现的？\"><a href=\"#postValue-是如何实现的？\" class=\"headerlink\" title=\"postValue 是如何实现的？\"></a>postValue 是如何实现的？</h4><p>从源码可以看出来，当多次调用postValue时，如果主线程还没来得及处理前面的更新，则只会更新最后一次的value，并不会 post 多次runable到主线程去执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">postValue</span><span class=\"params\">(T value)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> postTask;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</div><div class=\"line\">      <span class=\"comment\">// 当 mPendingData 为 NOT_SET 标记 postTask 为true</span></div><div class=\"line\">        postTask = mPendingData == NOT_SET;</div><div class=\"line\">      <span class=\"comment\">// 将 mPendingData 的值更新为 value</span></div><div class=\"line\">        mPendingData = value;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"comment\">// 如果 postTask 为false， 即在postValue 之前mPendingData 的值不是NOT_SET</span></div><div class=\"line\">  <span class=\"comment\">// 说明上一次postValue的任务还没有执行完，不需要重复提交</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!postTask) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"comment\">// post 一个runnable到主线程执行，深入到 postToMainThread 方法可以知道就是通过一个</span></div><div class=\"line\">  <span class=\"comment\">// 绑定了主线程looper的handler来实现的</span></div><div class=\"line\">    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Runnable mPostValueRunnable = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            Object newValue;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (mDataLock) &#123;</div><div class=\"line\">                newValue = mPendingData;</div><div class=\"line\">              <span class=\"comment\">// 将 mPendingData 重置为 NOT_SET 来标记本次任务完成</span></div><div class=\"line\">                mPendingData = NOT_SET;</div><div class=\"line\">            &#125;</div><div class=\"line\">          <span class=\"comment\">// setValue</span></div><div class=\"line\">            setValue((T) newValue);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"MutableLiveData-和-LiveData-的区别\"><a href=\"#MutableLiveData-和-LiveData-的区别\" class=\"headerlink\" title=\"MutableLiveData 和 LiveData 的区别\"></a>MutableLiveData 和 LiveData 的区别</h4><p>这个甚至不用看源码，熟悉kotlin就知道跟 List 和 MutableList 的区别一样。LiveData 中 <code>setValue</code> 和 <code>postValue</code> 都是 <code>protected</code>， 而MutableLiveData 把它们变成了 <code>public</code>。</p>\n<p>推荐 MutableLiveData 只提供给有修改data权限的类使用，对于一些只取值的类（UI等）则提供 LiveData，避免被错误修改。</p>\n<h4 id=\"Transformations-map-和-switchMap\"><a href=\"#Transformations-map-和-switchMap\" class=\"headerlink\" title=\"Transformations.map 和 switchMap\"></a>Transformations.map 和 switchMap</h4><p>如果之前对 RxJava 比较熟悉的同学基本都能理解这两个方法的区别和原理。本质上和 RxJava 的 map 和 flatmap类似</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;X, Y&gt; <span class=\"function\">LiveData&lt;Y&gt; <span class=\"title\">map</span><span class=\"params\">(</span></span></div><div class=\"line\">        @NonNull LiveData&lt;X&gt; source,</div><div class=\"line\">        @NonNull <span class=\"keyword\">final</span> Function&lt;X, Y&gt; mapFunction) &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> MediatorLiveData&lt;Y&gt; result = <span class=\"keyword\">new</span> MediatorLiveData&lt;&gt;();</div><div class=\"line\">  <span class=\"comment\">// 利用MediatorLiveData 的特性订阅原LiveData</span></div><div class=\"line\">    result.addSource(source, <span class=\"keyword\">new</span> Observer&lt;X&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChanged</span><span class=\"params\">(@Nullable X x)</span> </span>&#123;</div><div class=\"line\">          <span class=\"comment\">// 然后将原LiveData 通过传进来的mapFunction转换后回调给观察者</span></div><div class=\"line\">            result.setValue(mapFunction.apply(x));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;X, Y&gt; <span class=\"function\">LiveData&lt;Y&gt; <span class=\"title\">switchMap</span><span class=\"params\">(</span></span></div><div class=\"line\">        @NonNull LiveData&lt;X&gt; source,</div><div class=\"line\">        @NonNull <span class=\"keyword\">final</span> Function&lt;X, LiveData&lt;Y&gt;&gt; switchMapFunction) &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> MediatorLiveData&lt;Y&gt; result = <span class=\"keyword\">new</span> MediatorLiveData&lt;&gt;();</div><div class=\"line\">    result.addSource(source, <span class=\"keyword\">new</span> Observer&lt;X&gt;() &#123;</div><div class=\"line\">        LiveData&lt;Y&gt; mSource;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChanged</span><span class=\"params\">(@Nullable X x)</span> </span>&#123;</div><div class=\"line\">          <span class=\"comment\">// 和map一样，核心也是传进来的这个转换函数</span></div><div class=\"line\">          <span class=\"comment\">// 不同的是 map的转换函数是将原livedata的值处理/转换另外一个类型的值（当然也可以同类型）</span></div><div class=\"line\">          <span class=\"comment\">// 而这里的转换函数是将原Livedata 的值处理后包装到另一个Livedata中并返回</span></div><div class=\"line\">            LiveData&lt;Y&gt; newLiveData = switchMapFunction.apply(x);</div><div class=\"line\">            <span class=\"keyword\">if</span> (mSource == newLiveData) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mSource != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                result.removeSource(mSource);</div><div class=\"line\">            &#125;</div><div class=\"line\">            mSource = newLiveData;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mSource != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                result.addSource(mSource, <span class=\"keyword\">new</span> Observer&lt;Y&gt;() &#123;</div><div class=\"line\">                    <span class=\"meta\">@Override</span></div><div class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChanged</span><span class=\"params\">(@Nullable Y y)</span> </span>&#123;</div><div class=\"line\">                        result.setValue(y);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>事实上我们完全可以自己去根据项目需求来自定义一些类似RxJava的操作符。</p>\n<h3 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h3><p>没有总结，以后关于源码的文章都不写总结了。希望自己和看到这篇文章的人都能静下来认真看完源码学习的过程，然后得出自己的理解和总结，而不是看了两段就直接跳到后面来背总结。</p>\n"}