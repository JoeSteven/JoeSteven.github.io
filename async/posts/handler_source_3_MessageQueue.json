{"tags":[],"categories":[{"name":"Android源码学习","permalink":"https://joesteven.github.io/categories/Android源码学习/","url":"/async/categories/Android源码学习.json","count":11}],"url":"/async/posts/handler_source_3_MessageQueue.json","date":1471447527000,"path":{"year":2016,"month":8,"day":17,"name":"handler_source_3_MessageQueue"},"title":"Handler源码学习（三）MessageQueue入队插队","permalink":"https://joesteven.github.io/handler_source_3_MessageQueue/","content":"<p><a href=\"http://extremej.itscoder.com/handler_source_1/\" target=\"_blank\" rel=\"external\">Handler源码学习（一）流程</a><br><a href=\"http://extremej.itscoder.com/handler_source_2_Message/\" target=\"_blank\" rel=\"external\">Handler源码学习（二）Message对象池</a><br>Handler源码学习（三）MessageQueue入队插队</p>\n<h4 id=\"1-消息入队\"><a href=\"#1-消息入队\" class=\"headerlink\" title=\"1.消息入队\"></a>1.消息入队</h4><p>消息队列与Message对象池的结构很像，也是通过对象之间通过next指向形成链表结构</p>\n<p>这时候加入一个msg消息，先来看如果消息队列为空的情况</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//判断消息队列为空时，会直接将这个msg赋值给mMessage，并将p赋值给msg.next，这时next当然时null</span></div><div class=\"line\">msg.markInUse();</div><div class=\"line\">msg.when = when;</div><div class=\"line\">Message p = mMessages;</div><div class=\"line\"><span class=\"keyword\">boolean</span> needWake;</div><div class=\"line\"><span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when == <span class=\"number\">0</span> || when &lt; p.when) &#123;</div><div class=\"line\">    <span class=\"comment\">// New head, wake up the event queue if blocked.</span></div><div class=\"line\">    msg.next = p;</div><div class=\"line\">    mMessages = msg;</div><div class=\"line\">    needWake = mBlocked;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>假设现在队列中已经有了两个消息，这两个消息的排练是按照执行时间，如果时间相同则是按照入队先后排列。来一步步分析，可以先看后面的图，把思路理清，再看源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class=\"line\">    <span class=\"comment\">// up the event queue unless there is a barrier at the head of the queue</span></div><div class=\"line\">    <span class=\"comment\">// and the message is the earliest asynchronous message in the queue.</span></div><div class=\"line\">    needWake = mBlocked &amp;&amp; p.target == <span class=\"keyword\">null</span> &amp;&amp; msg.isAsynchronous();</div><div class=\"line\">  \t<span class=\"comment\">//首先声明了一个message对象prev，从字面意思理解是前一个message的意思</span></div><div class=\"line\">    Message prev;</div><div class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">      <span class=\"comment\">//接着进入一个死循环，将p赋值给prev，看看前面的代码可以知道，p指向的是mMessages,所以这里</span></div><div class=\"line\">      <span class=\"comment\">//是将prev指向了mMessage，再下一次循环的时候，prev则是指向了第二个message，依次类推</span></div><div class=\"line\">        prev = p;</div><div class=\"line\">      <span class=\"comment\">//接着将p指向p.next也就是mMessages.next,也就是消息链表中的第二个message</span></div><div class=\"line\">        p = p.next;</div><div class=\"line\">      <span class=\"comment\">//接下来判断两件事</span></div><div class=\"line\">      <span class=\"comment\">//1.p==null，说明没有下一个消息了，跳出循环</span></div><div class=\"line\">      <span class=\"comment\">//2.p!=null，并且当前需要入队的这个message的执行时间是小于队列中这个任务的执行时间的</span></div><div class=\"line\">      <span class=\"comment\">//也就是说这个入队的message需要比队列中的这个message先执行，也跳出循环</span></div><div class=\"line\">      <span class=\"comment\">//3.如果这两个条件都不满足的话，则继续跟队列中的下一个消息进行对比，直到满足条件，或者到</span></div><div class=\"line\">      <span class=\"comment\">//队列的末尾</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when &lt; p.when) &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class=\"line\">            needWake = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"comment\">//跳出循环后做了两件事情</span></div><div class=\"line\">  <span class=\"comment\">// 1.将入队的这个消息的next指向循环中获取到的应该排在这个消息之后的message</span></div><div class=\"line\">    msg.next = p; <span class=\"comment\">// invariant: p == prev.next</span></div><div class=\"line\">  <span class=\"comment\">//将msg前面那个message.next指向了msg</span></div><div class=\"line\">    prev.next = msg;</div><div class=\"line\">  <span class=\"comment\">//到这里就将一个message完成了入队</span></div><div class=\"line\">  <span class=\"comment\">//入队的过程是线程安全的</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1473110-cf3917ec68d63362.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"MessageQueue入队.jpg\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1473110-8d1085869f87c65b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"MessageQueue入队（2）.jpg\"></p>\n<h4 id=\"2-取出消息\"><a href=\"#2-取出消息\" class=\"headerlink\" title=\"2.取出消息\"></a>2.取出消息</h4><p>这里贴的不是完整代码，而是取出message的核心逻辑代码，这里其实分了两个部分，第一个部分是消息插队，这个在第三节叙述，第二个部分是正常的消息，其实取出消息的部分比较简单，注释也比较清晰</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// Try to retrieve the next message.  Return if found.</span></div><div class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">    Message prevMsg = <span class=\"keyword\">null</span>;</div><div class=\"line\">  <span class=\"comment\">//队列的第一个message</span></div><div class=\"line\">    Message msg = mMessages;</div><div class=\"line\">  <span class=\"comment\">//正常取出消息</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">//1.首先判断当前时间是否小于了msg的执行时间，</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (now &lt; msg.when) &#123;</div><div class=\"line\">            <span class=\"comment\">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class=\"line\">          <span class=\"comment\">//(翻译)需要执行的消息还没有到执行时间，设置一个唤醒时间，当到了执行时间时唤醒</span></div><div class=\"line\">            nextPollTimeoutMillis = (<span class=\"keyword\">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// Got a message.正常取出消息，这里逻辑比较简单，不再赘述</span></div><div class=\"line\">            mBlocked = <span class=\"keyword\">false</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (prevMsg != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                prevMsg.next = msg.next;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                mMessages = msg.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            msg.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) Log.v(TAG, <span class=\"string\">\"Returning message: \"</span> + msg);</div><div class=\"line\">            msg.markInUse();</div><div class=\"line\">            <span class=\"keyword\">return</span> msg;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// No more messages.</span></div><div class=\"line\">        nextPollTimeoutMillis = -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-消息插队\"><a href=\"#3-消息插队\" class=\"headerlink\" title=\"3.消息插队\"></a>3.消息插队</h4><p>首先需要知道的是整个android系统其实主要是依赖消息机制来处理事件，比如说点击事件等等，都是通过handler发送消息进行处理，但是这些系统消息相较于程序自己发送的消息，应该要优先执行，所以就涉及到了消息插队</p>\n<ul>\n<li>isAsynchronous() — 如何将系统消息和程序发送的消息区分开来</li>\n</ul>\n<p>在阅读Hanlder的源码的时候，可以看到一个@hide的构造方法，传入一个布尔值，从字面意思理解是异步</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(<span class=\"keyword\">boolean</span> async)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(<span class=\"keyword\">null</span>, async);</div><div class=\"line\">&#125;</div><div class=\"line\">mAsynchronous = async;<span class=\"comment\">//赋值给mAsychronous</span></div><div class=\"line\"><span class=\"comment\">//消息入队的时候，msg.setAsynchronous(true);将这个msg标记为异步</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(MessageQueue queue, Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</div><div class=\"line\">        msg.target = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mAsynchronous) &#123;</div><div class=\"line\">            msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>为什么要标记为异步呢？是要新开一个线程来执行么？可是最后也是发送到looper所绑定的消息队列中啊，貌似这里并没有异步，接着看上一节提到的消息插队的源码，在这里看到调用了一个方法msg.isAsynchronous()，貌似这个布尔值并不是跟异步有关系，而是将这个消息做了一个标记而已</p>\n<p>前面的消息入队分析可以知道，虽然被标记了系统消息，但是还是按照消息队列的规则去入队，那么如何做到优先取出这个任务呢，一步步看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\">Message prevMsg = <span class=\"keyword\">null</span>;</div><div class=\"line\">Message msg = mMessages;</div><div class=\"line\"><span class=\"comment\">//1.判断当前第一个消息不为空</span></div><div class=\"line\"><span class=\"comment\">//2.重点来了,msg.target == null,如果这个消息的target为空，看过handler源码可以知道，</span></div><div class=\"line\"><span class=\"comment\">//只要是通过handler发送消息，就会将这个msg的target指向发送消息的handler，否则也无法处理这个消息</span></div><div class=\"line\"><span class=\"comment\">//那么为什么这里会出现target为空呢？先看if代码块里面的代码</span></div><div class=\"line\"><span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></div><div class=\"line\">  \t<span class=\"comment\">//进入一个循环，注意while中的判断条件</span></div><div class=\"line\">    do &#123;</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">//不断地取下一个消息来匹配判断条件</span></div><div class=\"line\">        prevMsg = msg;</div><div class=\"line\">        msg = msg.next;</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class=\"line\">  <span class=\"comment\">//只有当msg不为空 并且当前的这个消息是异步的，也就是说是系统消息，则跳出循环。</span></div><div class=\"line\">  <span class=\"comment\">//跳出循环后就走到了正常取消息的代码中，取出的正是这个系统消息，发现插队就成功了</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的分析已经插队成功，但是还有疑点，到底是怎么进入到if代码块中的</p>\n<blockquote>\n<p>// Stalled by a barrier.  Find the next asynchronous message in the queue.</p>\n</blockquote>\n<p>作者在这里给了一条注释，通过一个阻塞块来停止正常的队列，找到队列中的第一个系统消息</p>\n<p>在MessageQueue中试图搜索barrier，发现一个方法，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">postSyncBarrier</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> postSyncBarrier(SystemClock.uptimeMillis());</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">postSyncBarrier</span><span class=\"params\">(<span class=\"keyword\">long</span> when)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Enqueue a new sync barrier token.</span></div><div class=\"line\">    <span class=\"comment\">// We don't need to wake the queue because the purpose of a barrier is to stall it.</span></div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> token = mNextBarrierToken++;</div><div class=\"line\">        <span class=\"keyword\">final</span> Message msg = Message.obtain();</div><div class=\"line\">        msg.markInUse();</div><div class=\"line\">        msg.when = when;</div><div class=\"line\">        msg.arg1 = token;</div><div class=\"line\"></div><div class=\"line\">        Message prev = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Message p = mMessages;</div><div class=\"line\">      <span class=\"comment\">//判断将这个消息插入到队列中的哪个位置</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (when != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; p.when &lt;= when) &#123;</div><div class=\"line\">                prev = p;</div><div class=\"line\">                p = p.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// invariant: p == prev.next</span></div><div class=\"line\">            msg.next = p;</div><div class=\"line\">            prev.next = msg;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            msg.next = p;</div><div class=\"line\">            mMessages = msg;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> token;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>加入队列的代码已经很熟悉了，可以看到在这段代码中其实入队了一个没有target的消息，而最上面那个public方法中可以看到传入的when是当前的系统时间，也就是说如果调用这个方法会在消息队列的头部插入一个没有target的message，到这里思路就比较清晰了，但是这个消息肯定不能一直在队列中，否则整个队列的正常消息就永远无法处理，所以相对应还有一个remove。注释中说明，这个方法应该跟插入的方法匹配使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeSyncBarrier</span><span class=\"params\">(<span class=\"keyword\">int</span> token)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Remove a sync barrier token from the queue.</span></div><div class=\"line\">    <span class=\"comment\">// If the queue is no longer stalled by a barrier then wake it.</span></div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        Message prev = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Message p = mMessages;</div><div class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; (p.target != <span class=\"keyword\">null</span> || p.arg1 != token)) &#123;</div><div class=\"line\">            prev = p;</div><div class=\"line\">            p = p.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"The specified message queue synchronization \"</span></div><div class=\"line\">                    + <span class=\"string\">\" barrier token has not been posted or has already been removed.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> needWake;</div><div class=\"line\">        <span class=\"keyword\">if</span> (prev != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            prev.next = p.next;</div><div class=\"line\">            needWake = <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mMessages = p.next;</div><div class=\"line\">            needWake = mMessages == <span class=\"keyword\">null</span> || mMessages.target != <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        p.recycleUnchecked();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// If the loop is quitting then it is already awake.</span></div><div class=\"line\">        <span class=\"comment\">// We can assume mPtr != 0 when mQuitting is false.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (needWake &amp;&amp; !mQuitting) &#123;</div><div class=\"line\">            nativeWake(mPtr);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当发送系统消息时 会在消息队列中插入一个target为空的message，在取出消息时如果发现了这个消息，就跳过所有的正常消息，返回最近的一个系统消息，然后将这个标记消息从队列中remove。</p>\n<p>整个Handler源码学习系列笔记就完结了，当然现在也没有到特别深入的程度，但了解了整套Handler的消息机制后，相信对于源码的阅读能力和编程思路上也有挺大的提高。</p>\n"}